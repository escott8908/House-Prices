})
# generate qq plots -----
g_qq = map(num, function(n){
ggplot(data3, aes_string(sample = n)) + geom_qq() + geom_qq_line(color = 'blue')
})
# generate density -----
g_density = map(num, function(n){
ggplot(data3, aes_string(n)) +
geom_histogram(aes(y = ..density..), color = "black", fill = "grey", alpha = .5) +
geom_density(color = 'blue')
})
# generate position plots -----
g_points = map(num, function(n){
ggplot(data3, aes_string("Id", n)) +
geom_point(alpha = .2) + geom_miss_point(alpha = .3)
})
# plot -----
for(n in sort(num)){
cat("##", n, "\n")
g_list = list(g_boxplot[[n]], g_qq[[n]], g_points[[n]], g_density[[n]])
print(grid.arrange(grobs = g_list), nrow = 2)
cat("\n\n")
}
num
filter(data, BedroomAbvGr == min(BedroomAbvGr))
dplyr::filter(data, BedroomAbvGr == min(BedroomAbvGr))
filter(data0, BedroomAbvGr == min(BedroomAbvGr))
filter(data0, BedroomAbvGr == min(BedroomAbvGr)) %>% View
map(data3[,num], function(col){
col %in% boxplot.stats(col)$x
})
map_dfc(data3[,num], function(col){
col %in% boxplot.stats(col)$x
})
map_dfc(data3[,num], function(col){
col %in% boxplot.stats(col)$x
}) %>% rowSums()
m = map_dfc(data3[,num], function(col){
col %in% boxplot.stats(col)$x
}) %>% rowSums()
boxplot(m)
map_dfc(data3[,num], function(col){
col %in% boxplot.stats(col)$x
})
map_dfc(data3[,num], function(col){
col %in% boxplot.stats(col)$out
})
map_dfc(data3[,num], function(col){
col %in% boxplot.stats(col)$out
}) %>% rowSums()
row_outlier_count = map_dfc(data3[,num], function(col){
col %in% boxplot.stats(col)$out
}) %>% rowSums()
row_outlier_count = map_dfc(data3[,num] %>% select(-Id), function(col){
col %in% boxplot.stats(col)$out
}) %>% rowSums()
boxplot(row_outlier_count)
boxplot(row_outlier_count)
plot(density(row_outlier_count))
row_outlier_count = map_dfc(data3[,num] %>% select(-Id), function(col){
col %in% boxplot.stats(col)$out
}) %>% rowSums()
boxplot(row_outlier_count)
plot(density(row_outlier_count))
row_outlier_count = map_dfc(data3[,num] %>% select(-Id), function(col){
col %in% boxplot.stats(col)$out
}) %>% rowSums()
boxplot(row_outlier_count)
plot(density(row_outlier_count))
histogram(row_outlier_count)
row_outlier_count = map_dfc(data3[,num] %>% select(-Id), function(col){
col %in% boxplot.stats(col)$out
}) %>% rowSums()
boxplot(row_outlier_count)
plot(density(row_outlier_count))
hist(row_outlier_count)
length(num)
length(num)*.25
33*.10; 33*.25
DT::datatable(filter(data3, row_outlier_count > 0), filter = "top")
num
filter(data3, BedroomAbvGr == 8)
which(data3$BedroomAbvGr %in% boxplot.stats(data3$BedroomAbvGr))
which(data3$BedroomAbvGr %in% boxplot.stats(data3$BedroomAbvGr)$out)
slice(data, which(data3$BedroomAbvGr %in% boxplot.stats(data3$BedroomAbvGr)$out))
slice(data3, which(data3$BedroomAbvGr %in% boxplot.stats(data3$BedroomAbvGr)$out))
slice(data3, which(data3$BedroomAbvGr %in% boxplot.stats(data3$BedroomAbvGr)$out)) %>% View
DT::datatable(filter(data3, row_outlier_count > 0), filter = "top")
map_dfc(data3[,num] %>% select(-Id), function(col){
col %in% boxplot.stats(col)$out
})
m = map_dfc(data3[,num] %>% select(-Id), function(col){
col %in% boxplot.stats(col)$out
})
str_c(names(m), "_bps")
names(m) = str_c(names(m), "_bps")
# development -----
m = map_dfc(data3[,num] %>% select(-Id), function(col){
col %in% boxplot.stats(col)$out
})
names(m) = str_c(names(m), "_bps")
data_bps = bind_cols(data_bps, m)
# development -----
m = map_dfc(data3[,num] %>% select(-Id), function(col){
col %in% boxplot.stats(col)$out
})
names(m) = str_c(names(m), "_bps")
data_bps = bind_cols(data3, m)
data_bps = select(sort(names(data_bps)))
# development -----
m = map_dfc(data3[,num] %>% select(-Id), function(col){
col %in% boxplot.stats(col)$out
})
names(m) = str_c(names(m), "_bps")
data_bps = bind_cols(data3, m)
data_bps = select(data_bps, sort(names(data_bps)))
# development -----
m = map_dfc(data3[,num] %>% select(-Id), function(col){
col %in% boxplot.stats(col)$out
})
names(m) = str_c(names(m), "_bps")
data_bps = bind_cols(data3, m)
data_bps = select(data_bps, sort(names(data_bps)))
DT::datatable(filter(data_bps, row_outlier_count > 0), filter = "top")
dim(data3)
nrow(data3)
length(row_outlier_count)/nrow(data3)
length(row_outlier_count > 0)/nrow(data3)
sum(row_outlier_count > 0)/nrow(data3)
sum(row_outlier_count > 0)/nrow(data3)
boxplot.stats(data3$BedroomAbvGr)
boxplot.stats(data3$SalePrice)
?boxplot.stats
(33*32)/2
help(package = DMwR2)
help(package = DMwR)
help(package = "dprep")
?DMwR::lofactor
?biplot
?ggbiplot::ggbiplot()
DMwR::lofactor
DMwR::lofactor
DMwR::lofactor()
?DMwR::lofactor
DMwR::lofactor(data3[,num], k = 3)
remove.packages('curl')
install.packages('curl')
DMwR::lofactor(data[,num] %>% select(-Id), k = 3)
DMwR::lofactor(data3[,num] %>% select(-Id), k = 3)
lo = DMwR::lofactor(data3[,num] %>% select(-Id), k = 10)
lo
is.na(lo)
is.na(lo) %>% sum
nrow(data3)
help(package = "DBSCAN")
library("DBSCAN")
plot(hclust(dist(data3[,num] %>% select(-Id))))
hc = hclust(dist(data3[,num] %>% select(-Id)))
plot(hc)
rect.hclust(hc, k = 3)
rect.hclust(hc, k = 4)
plot(hc)
rect.hclust(hc, k = 4)
cutree(hc, k = 4)
hc_cut = cutree(hc, k = 4)
hc_cut
ftable(hc_cut)
help(package = "arules")
?dbscan
?fpc::dbscan
data3 %>% filter(BsmtFinSF2 > 0) %>% ggplot(aes(sample = BsmtFinSF2)) +
geom_qq() + geom_qq_line(color = 'blue')
data3 %>% filter(BsmtFinSF2 > 0) %>% ggplot(aes(sample = BsmtFinSF2)) +
geom_qq() + geom_qq_line(color = 'blue')
filter(data3, BedroomAbvGr == 8)
data3$SaleCondition %>% percent_rank()
8/12
11/12
data3$SalePrice
data3$SalePrice %>% complete.cases()
data3$SalePrice
complete.cases(data3$SalePrice)
data3$SalePrice(complete.cases(data3$SalePrice))
data3$SalePrice[complete.cases(data3$SalePrice)]
data3$SalePrice[complete.cases(data3$SalePrice)] %>% sort()
(data3$SalePrice[complete.cases(data3$SalePrice)] %>% sort()) < 200000
((data3$SalePrice[complete.cases(data3$SalePrice)] %>% sort()) < 200000) %>% sum()
select(data3, SalePrice) %>% mutate(pr = percent_rank(SalePrice))
select(data3, Id, SalePrice) %>% mutate(pr = percent_rank(SalePrice)) %>%
select(data3, Id, SalePrice) %>% mutate(pr = percent_rank(SalePrice))
select(data3, Id, SalePrice) %>% mutate(pr = percent_rank(SalePrice)) %>% filter(Id == 636)
1440+3
1440*3
filter(data3, BedroomAbvGr == 8)
getSalePricePercentile = function(Id = NA){
select(data3, Id, SalePrice) %>% mutate(pr = percent_rank(SalePrice)) %>% filter(Id == Id)
}
getSalePricePercentile(636)
getSalePricePercentile = function(id = NA){
select(data3, Id, SalePrice) %>% mutate(pr = percent_rank(SalePrice)) %>% filter(Id == id)
}
getSalePricePercentile(636)
getSalePricePercentile(636)
getSalePricePercentile = function(id = NA){
select(data3, Id, SalePrice) %>% mutate(pr = 100*percent_rank(SalePrice)) %>% filter(Id == id)
}
getSalePricePercentile(636)
getSalePricePercentile = function(id = NA){
select(data3, Id, SalePrice) %>% mutate(percentile = 100*percent_rank(SalePrice)) %>% filter(Id == id)
}
getSalePricePercentile(636)
getSalePricePercentile = function(id = NA){
select(data3, Id, SalePrice) %>% mutate(percentile = percent_rank(SalePrice)) %>% filter(Id == id)
}
getSalePricePercentile(636)
getSalePricePercentile = function(id = NA){
select(data3, Id, SalePrice) %>% mutate(percentile = percent_rank(SalePrice)) %>% filter(Id == id) %>% print()
print(summary(data3$SalePrice))
}
getSalePricePercentile(636)
filter(data3, is.na(BsmtFinSF1))
filter(data3, is.na(BsmtFinSF1))
filter(data3, is.na(BsmtFinSF1))
arrange(data3, BsmtFinSF1) %>% tail
arrange(data3, BsmtFinSF1) %>% select(BsmtFinSF1, TotalBsmtSF) %>% tail
arrange(data3, BsmtFinSF1) %>% tail
arrange(data3, BsmtFinSF1) %>% select(BsmtFinSF1, TotalBsmtSF, SailPrice) %>% tail
arrange(data3, BsmtFinSF1) %>% select(BsmtFinSF1, TotalBsmtSF, SalePrice) %>% tail
arrange(data3, BsmtFinSF1) %>% select(BsmtFinSF1, BsmtFinSF2, TotalBsmtSF, SalePrice) %>% tail
arrange(data3, BsmtFinSF1) %>%
select(BsmtFinSF1, BsmtFinSF2, BsmtFullBath, BsmtHalfBath, BsmtUnfSF, FirstFlrSF, TotalBsmtSF, SalePrice) %>% tail
arrange(data3, BsmtFinSF1) %>%  tail
saveRDS(data3, "data3.RDS")
map(data3, class)
map_char(data3, class) %>% ftable
map_chr(data3, class) %>% ftable
map_chr(data3, class)
map(data3, class)
map_chr(data3, class)
map_chr(data3[1:63], class)
map[64]
map[63]
data[63]
data3[63]
data3[64]
class(data3[64])
class(data3[[64]])
type(data3[[64]])
typeof(data3[[64]])
map_chr(data3[1:63], typeof)
map_chr(data3[1:63], typeof) %>% ftable
glimplse(data3)
glimpse(data3)
map(data3, is.numeric)
map(data3, is.numeric) %>% sum
map_lgl(data3, is.numeric) %>% sum
input = readRDS("data3.RDS")
library(mlr)
library(tidyverse)
library(naniar)
help(package = 'naniar')
visdat::vis_dat(input)
is.na(input) %>% colSums() %>% sort
is.na(input %>% select(-SalePrice)) %>% colSums() %>% sort
library(mlr)
library(tidyverse)
#library(naniar)
input = readRDS("data3.RDS")
visdat::vis_dat(input)
is.na(input %>% select(-SalePrice)) %>% colSums() %>% sort
is.na(input %>% select(-SalePrice)) %>% colSums() %>% as.data.frame()
is.na(input %>% select(-SalePrice)) %>% colSums() %>% as.data.frame() %>% rownames_to_column("feature")
is.na(input %>% select(-SalePrice)) %>% colSums() %>% as.data.frame() %>% rownames_to_column("feature") %>% rename(".", na_count)
is.na(input %>% select(-SalePrice)) %>% colSums() %>% as.data.frame() %>% rownames_to_column("feature") %>% rename(na_count = ".")
is.na(input %>% select(-SalePrice)) %>% colSums() %>% as.data.frame() %>% rownames_to_column("feature") %>% rename(na_count = ".") %>% filter(na_count > 0)
is.na(input %>% select(-SalePrice)) %>% colSums() %>% as.data.frame() %>% rownames_to_column("feature") %>% rename(na_count = ".") %>% filter(na_count > 0) %>%
ggplot(aes(reorder(feature,na_count), na_count))
is.na(input %>% select(-SalePrice)) %>% colSums() %>% as.data.frame() %>% rownames_to_column("feature") %>% rename(na_count = ".") %>% filter(na_count > 0) %>%
ggplot(aes(reorder(feature,na_count), na_count)) + geom_bar(stat = 'identity')
is.na(input %>% select(-SalePrice)) %>% colSums() %>% as.data.frame() %>% rownames_to_column("feature") %>% rename(na_count = ".") %>% filter(na_count > 0) %>%
ggplot(aes(reorder(feature,na_count), na_count)) + geom_bar(stat = 'identity') +
coord_flip()
listLearners("regr", properties = "missings")[c("class", "package")]
listLearners("classif", properties = "missings")[c("class", "package")]
listLearners("classif", properties = "missings")[c("class", "package")] %>% as.data.frame()
listLearners("regr", properties = "missings")[c("class", "package")] %>% as.data.frame()
glimpse(data3)
impute(data3, target = "SalePrice", cols = list(
LotFrontage = imputeLearner("regr.randomForestSRC"),
dummy.cols = c("LotFrontage")
))
impute(data3, target = "SalePrice", cols = list(
LotFrontage = imputeLearner("regr.randomForestSRC")
))
impute(data3, target = "SalePrice", cols = list(
LotFrontage = imputeLearner("regr.rpart")
))
levels(data3$Condition2)
createDummyFeatures(input)
input_dummy = createDummyFeatures(input)
impute(input_dummy, target = "SalePrice", cols = list(
LotFrontage = imputeLearner("regr.rpart")
))
input_impute = impute(input_dummy, target = "SalePrice", cols = list(
LotFrontage = imputeLearner("regr.rpart")
))
input_impute = impute(input_dummy, target = "SalePrice", cols = list(
LotFrontage = imputeLearner("regr.rpart"),
dummy.cols = c("LotFrontage")
))
input_impute = impute(input_dummy, target = "SalePrice", cols = list(
LotFrontage = imputeLearner("regr.rpart"),
dummy.cols = c("LotFrontage")
))
input_impute = impute(input_dummy, target = "SalePrice", cols = list(
LotFrontage = imputeLearner("regr.rpart")),
dummy.cols = c("LotFrontage")
))
input_impute = impute(input_dummy, target = "SalePrice", cols = list(
LotFrontage = imputeLearner("regr.rpart")),
dummy.cols = c("LotFrontage")
)
input_impute
input_impute$data
input_impute = impute(input_dummy, target = "SalePrice", classes = list(
integer = imputerLearner('regr.part')
))
input_impute = impute(input_dummy, target = "SalePrice", classes = list(
integer = imputerLearner('regr.rpart')
))
input_impute = impute(input_dummy, target = "SalePrice", classes = list(
integer = imputeLearner('regr.rpart')
))
input_impute = impute(input_dummy, target = "SalePrice", classes = list(
integer = imputeLearner('regr.rpart'),
factor = imputeLearner('classif.rpart')
))
visdat::vis_dat(input_impute)
visdat::vis_dat(input_impute$data)
input_dummy = createDummyFeatures(input)
# input_impute = impute(input_dummy, target = "SalePrice", cols = list(
#   LotFrontage = imputeLearner("regr.rpart")),
#   dummy.cols = c("LotFrontage")
# )
input_impute = impute(input_dummy, target = "SalePrice", classes = list(
integer = imputeLearner('regr.rpart'),
factor = imputeLearner('classif.rpart')
))
visdat::vis_dat(input_impute$data)
as_shadow_upset(input_impute$data) %>% upset
is.na(input_impute$data)
is.na(input_impute$data) %>% colSums()
is.na(input_impute$data) %>% colSums() %>% as.data.frame
is.na(input_impute$data) %>% colSums() %>% as.data.frame %>% head
is.na(input_impute$data) %>% colSums() %>% as.data.frame %>% rename(na_count = ".")
is.na(input_impute$data) %>% colSums() %>% as.data.frame %>% rename(na_count = ".") %>% filter(na_count > 0)
input_impute = impute(input_dummy, target = "SalePrice", classes = list(
integer = imputeLearner('regr.rpart'),
factor = imputeLearner('classif.randomForestSRC')
))
is.na(input_impute$data) %>% colSums() %>% as.data.frame %>% rename(na_count = ".") %>% filter(na_count > 0)
is.na(input_impute$data) %>% colSums() %>% as.data.frame %>% rename(na_count = ".")
is.na(input_impute$data) %>% colSums() %>% as.data.frame %>% rownames_to_column("feature") %>% rename(na_count = ".")
is.na(input_impute$data) %>% colSums() %>% as.data.frame %>% rownames_to_column("feature") %>% rename(na_count = ".") %>% filter(na_count > 0)
input_impute = impute(input_dummy, target = "SalePrice", classes = list(
integer = imputeLearner('regr.rpart'),
factor = imputeMode()
))
visdat::vis_dat(input_impute$data)
as_shadow_upset(input_impute$data) %>% upset
is.na(input_impute$data) %>% colSums() %>% as.data.frame %>% rownames_to_column("feature") %>% rename(na_count = ".") %>% filter(na_count > 0)
View(input_impute$data)
impute(input, target = "SalePrice", classes = list(integer = imputeLearner('regr.rpart')))
impute(input, target = "SalePrice", classes = list(
factor = imputeMode('classif.rpart'),
integer = imputeLearner('regr.rpart'))
)
impute(input, target = "SalePrice", classes = list(
factor = imputeMode('classif.rpart'),
integer = imputeLearner('regr.rpart'))
)
impute(input, target = "SalePrice", classes = list(
factor = imputeMode(),
integer = imputeLearner('regr.rpart'))
)
mergeSmallFactorLevels(input)
input_impute = impute(input_dummy, target = "SalePrice", classes = list(
integer = imputeLearner('regr.randomForestSRC')
))
as_shadow_upset(input_impute$data) %>% upset
input_impute$data %>% is.na() %>% colSums()
input_impute$data %>% is.na() %>% colSums() %>% as.data.frame()
input_impute$data %>% is.na() %>% colSums() %>% as.data.frame() %>%
rownames_to_column("features") %>% rename(na_count = ".")
input_impute$data %>% is.na() %>% colSums() %>% as.data.frame() %>%
rownames_to_column("features") %>% rename(na_count = ".") %>%
filter(na_count > 0)
input_impute = impute(input, target = "SalePrice", classes = list(integer = imputeLearner('regr.rpart')))
input_impute = impute(input_dummy, target = "SalePrice", class = list(
integer = imputeLearner('regr.rpart')
))
input_impute$data %>% is.na() %>% colSums() %>% as.data.frame() %>%
rownames_to_column("features") %>% rename(na_count = ".") %>%
filter(na_count > 0)
impute(input, target = "SalePrice", cols = list(
LotFrontage = imputeLearner('regr.rpart')
))
impute(input, target = "SalePrice", cols = list(
Condition2 = imputeLearner('classif.rpart'),
LotFrontage = imputeLearner('regr.rpart')
))
ftable(input$Condition2)
?impute
removeConstantFeatures(input)
removeConstantFeatures(input, na.ignore = TRUE)
removeConstantFeatures(input, na.ignore = TRUE, dont.rm = "SalePrice")
removeConstantFeatures(input, na.ignore = TRUE, dont.rm = "SalePrice") %>% names
names(input)
removeConstantFeatures(input, na.ignore = TRUE, dont.rm = "SalePrice") %>% names
r = removeConstantFeatures(input, na.ignore = TRUE, dont.rm = "SalePrice")
attributes(r)
r = removeConstantFeatures(input, na.ignore = TRUE, dont.rm = "SalePrice", perc = .01)
r = removeConstantFeatures(input, na.ignore = TRUE, dont.rm = "SalePrice", perc = .05)
input_rcf = removeConstantFeatures(input, na.ignore = TRUE, dont.rm = "SalePrice", perc = .05)
impute(input_rcf, classes = list(
integer = imputeLearner('regr.rpart'),
factor = imputeLearner('classif.rpart')
))
input_impute2 = impute(input_rcf, classes = list(
integer = imputeLearner('regr.rpart'),
factor = imputeLearner('classif.rpart')
))
input_rcf = removeConstantFeatures(input, na.ignore = TRUE, dont.rm = "SalePrice", perc = .05)
input_rcf = removeConstantFeatures(input, na.ignore = TRUE, dont.rm = "SalePrice", perc = .1)
input_impute2 = impute(input_rcf, classes = list(
integer = imputeLearner('regr.rpart'),
factor = imputeLearner('classif.rpart')
))
ftable(input_rcf$Exterior1st)
input_impute2 = impute(input_rcf, classes = list(
integer = imputeLearner('regr.rpart'),
factor = imputeMode()
))
input_impute2 = impute(input_rcf, cols = list(
LotFrontage = imputeLearner('regr.rpart')
))
ftable((input_rcf$MSSubClass)
)
is.na((input_rcf$MSSubClass))
is.na((input_rcf$MSSubClass)) %>% sum()
?impute
input_impute2 = impute(input_rcf, cols = list(
LotFrontage = imputeLearner('regr.rpart'),
impute.new.levels = FALSE
))
input_impute2 = impute(input_rcf, cols = list(
LotFrontage = imputeLearner('regr.rpart')),
impute.new.levels = FALSE)
input_impute2 = impute(input_rcf, cols = list(
LotFrontage = imputeLearner('regr.rpart')),
impute.new.levels = FALSE)
input_impute2 = impute(input_rcf, cols = list(
LotFrontage = imputeLearner('regr.rpart')),
recode.factoor.levels = FALSE)
input_impute2 = impute(input_rcf, cols = list(
LotFrontage = imputeLearner('regr.rpart')),
recode.factor.levels = FALSE)
help(packages = forcats)
help(package = forcats)
fct_count(input_rcf$MSSubClass)
input_rcf = removeConstantFeatures(input_dummy, na.ignore = TRUE, dont.rm = "SalePrice", perc = .1)
input_impute2 = impute(input_rcf, classes = list(integer = imputeLearner('rpart')))
input_impute2 = impute(input_rcf, classes = list(integer = imputeLearner('regr.rpart')))
input_impute2$data %>% is.na() %>% colSums() %>% as.data.frame() %>%
rownames_to_column("features") %>% rename(na_count = ".") %>%
filter(na_count > 0)
input_impute2 = impute(input, classes = list(factor = imputeMode()))
input_impute2 = impute(input, classes = list(factor = imputeMode(), integer = imputeLearner('regr.rpart')))
input_impute2 = impute(input, classes = list(factor = imputeMode()))
impute(input_impute2$data, classes = list(integer = imputeLearner('regr.rpart')))
fct_count(input_impute2$data$Exterior1st)
fct_collapse(input_impute2$data$Exterior1st, "Stone_ImStucc_CBlock_BrkComm_Asphn")
fct_collapse(input_impute2$data$Exterior1st, Stone_ImStucc_CBlock_BrkComm_Asphn = c("Stone", "ImStucc", "CBlock", "BrkComm", "Asphn"))
fct_count(input_impute2$data$Exterior1st)
fct_collapse(input_impute2$data$Exterior1st, Stone_ImStucc_CBlock_BrkComm_Asphn = c("Stone", "ImStucc", "CBlock", "BrkComm", "Ashphn"))
fct_count(input_impute2$data$Exterior1st)
fct_collapse(input_impute2$data$Exterior1st, Stone_ImStucc_CBlock_BrkComm_AsphShn = c("Stone", "ImStucc", "CBlock", "BrkComm", "AshShn"))
fct_collapse(input_impute2$data$Exterior1st, Stone_ImStucc_CBlock_BrkComm_AsphShn = c("Stone", "ImStucc", "CBlock", "BrkComm", "AsphShn"))
fct_collapse(input_impute2$data$Exterior1st, Stone_ImStucc_CBlock_BrkComm_AsphShn = c("Stone", "ImStucc", "CBlock", "BrkComm", "AsphShn")) %>% fct_count
impute(input, target = "SalePrice", cols = list(
Condition2 = imputeLearner('classif.rpart'),
LotFrontage = imputeLearner('regr.rpart')
))
search()
library(tidyverse)
library(mlr)
input
dim(input)
library(naniar)
gg_miss_upset(input)
impute(input, target = "SalePrice", cols = list(
Condition2 = imputeLearner('classif.rpart'),
LotFrontage = imputeLearner('regr.rpart')
))
target = select(SalePrice, Id)
target = select(SalesPrice, Id)
names(input)
target = select(input, SalesPrice, Id)
target = select(input, SalePrice, Id)
features = select(input, -SalePrice)
makeClassifTask(input, target = "SalePrice")
makeClassifTask(data = input, target = "SalePrice")
